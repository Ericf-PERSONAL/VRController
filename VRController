using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Valve.VR;

public class VRController : MonoBehaviour
{
    public float m_VerticalSpeed = 0.0f;
    public float m_Gravity = 30.0f;
    public float m_Sensitivity = 0.1f;
    public float m_MaxSpeed = 1.0f;
    public float m_RotateIncrement = 90;

    public SteamVR_Action_Boolean m_MovePress = null;
    public SteamVR_Action_Vector2 m_MoveValue = null;
    public SteamVR_Action_Boolean m_RotatePress = null;

    private float m_Speed = 0.0f;

    private CharacterController m_CharacterController = null;
    private Transform m_Camerarig = null;
    private Transform m_Head = null;

    private void Awake()
    {
        m_CharacterController = GetComponent<CharacterController>();     
    }

    private void Start()
    {
        m_Camerarig = SteamVR_Render.Top().origin;
        m_Head = SteamVR_Render.Top().head;

    }
   
   private void Update()
    {
        HandleHeight();
        CalculateMovement();
        SnapRotation(); 
    }

    private void HandleHeight()
    {

        //get the head local space
        float headheight = Mathf.Clamp(m_Head.localPosition.y, 1, 2);
        m_CharacterController.height = headheight;

        //cut in half
        Vector3 NewCenter = Vector3.zero;
        NewCenter.y = m_CharacterController.height / 2;
        NewCenter.y += m_CharacterController.skinWidth;

        //move capsule in local space
        NewCenter.x = m_Head.localPosition.x;
        NewCenter.z = m_Head.localPosition.z;



        //apply
        m_CharacterController.center = NewCenter;

    }

    private void CalculateMovement()
    {
        if (m_CharacterController.isGrounded)
            m_VerticalSpeed = 0.0f;
               

            //figure out orientation
            Vector3 OrientationEuler = new Vector3(0, m_Head.eulerAngles.y, 0);
        Quaternion orientation = Quaternion.Euler(OrientationEuler);
        Vector3 Movement = Vector3.zero;


        //if not moving
        if (m_MovePress.GetStateUp(SteamVR_Input_Sources.Any))
            m_Speed = 0;

        //check movepress
        if(m_MovePress.state)
        {
            // ADD, Clamp 
            m_Speed += m_MoveValue.axis.y * m_Sensitivity;
            m_Speed = Mathf.Clamp(m_Speed, -m_MaxSpeed, m_MaxSpeed);
            //orientation
            Movement += orientation * (m_Speed * Vector3.forward);
        }

        //gravity
        m_VerticalSpeed -= m_Gravity * Time.deltaTime;
        Movement.y = m_VerticalSpeed;

        //apply
        m_CharacterController.Move(Movement*Time.deltaTime);

    }

    private void SnapRotation()
    {

        float Snapvalue = 0.0f;

        if (m_RotatePress.GetStateDown(SteamVR_Input_Sources.LeftHand))
            Snapvalue = -Mathf.Abs(m_RotateIncrement);

        if (m_RotatePress.GetStateDown(SteamVR_Input_Sources.RightHand))
            Snapvalue = Mathf.Abs(m_RotateIncrement);

        transform.RotateAround(m_Head.position, Vector3.up, Snapvalue);

    }

    

}
